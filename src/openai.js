import OpenAI from "openai";
import config from "config";
import { createReadStream } from "fs";

class OpenAIWrapper {
    constructor() {
        this.openai = new OpenAI({
            apiKey: config.get("OPENAI_KEY"),  // –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–µ—à—å API –∫–ª—é—á
        });
    }

    async transcription(filepath) {
        try {
            console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É:", filepath);
            
            // –ü–µ—Ä–µ–¥–∞—á–∞ —Ç–æ–∫–µ–Ω–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            const response = await this.openai.audio.transcriptions.create({
                file: createReadStream(filepath),
                model: "whisper-1", // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
            });

            console.log("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI:", response);
            return response.text;
        } catch (e) {
            console.error("‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:", e.message);
            return null;
        }
    }
}

export const openai = new OpenAIWrapper();
